        -:    0:Source:binsearch.c
        -:    0:Graph:binsearch.gcno
        -:    0:Data:binsearch.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
function binsearch called 5 returned 100% blocks executed 100%
        -:    3:int binsearch(int a[], int n, int x)
        -:    4:{
        5:    5:        int low = 0;
        5:    6:        int high = n-1;
        -:    7:        int mid;
       30:    8:        while(low <=  high)
branch  0 taken 93%
branch  1 taken 7%
        -:    9:        {
       14:   10:                mid = (low + high) / 2;
       14:   11:                if(a[mid] == x)
branch  0 taken 29%
branch  1 taken 71%
        -:   12:                {
        4:   13:                        return mid;
        -:   14:                }
       10:   15:                else if (x<a[mid])
branch  0 taken 40%
branch  1 taken 60%
        -:   16:                {
        4:   17:                        high = mid - 1;
        4:   18:                }
        -:   19:                else
        -:   20:                {
        6:   21:                        low = mid + 1;
        -:   22:                }
        -:   23:        }
        1:   24:        return -1;
        5:   25:}
function test called 1 returned 100% blocks executed 54%
        -:   26:void test()
        -:   27:{
        2:   28:        int a[7] = {2,4,6,8,10,12,14};
        1:   29:        int element_index = binsearch(a,7,4);
        2:   30:        assert(element_index == 1);
branch  0 taken 0%
branch  1 taken 100%
        1:   31:        element_index = binsearch(a,7,2);
        2:   32:        assert(element_index == 0);
branch  0 taken 0%
branch  1 taken 100%
        1:   33:        element_index = binsearch(a,7,10);
        2:   34:        assert(element_index == 4);
branch  0 taken 0%
branch  1 taken 100%
        1:   35:        element_index = binsearch(a,7,14);
        2:   36:        assert(element_index == 6);
branch  0 taken 0%
branch  1 taken 100%
        1:   37:        element_index = binsearch(a,7,28);
        2:   38:        assert(element_index == -1);
branch  0 taken 0%
branch  1 taken 100%
        1:   39:}
function main called 1 returned 100% blocks executed 100%
        -:   40:int main()
        -:   41:{
        1:   42:        test();
        1:   43:        return 0;
        -:   44:}
