File 'randomtestadventurer.c'
Lines executed:90.00% of 80
Branches executed:100.00% of 38
Taken at least once:89.47% of 38
No calls
randomtestadventurer.c:creating 'randomtestadventurer.c.gcov'

File 'randomtestcard1.c'
Lines executed:88.37% of 43
Branches executed:100.00% of 12
Taken at least once:66.67% of 12
No calls
randomtestcard1.c:creating 'randomtestcard1.c.gcov'

File 'randomtestcard2.c'
Lines executed:82.98% of 47
Branches executed:100.00% of 14
Taken at least once:71.43% of 14
No calls
randomtestcard2.c:creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:47.68% of 646
Branches executed:55.66% of 415
Taken at least once:38.55% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:20
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 317873 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   317873:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 43%
branch  1 taken 57%
   136648:   10:    return 1;
   181225:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 74%
branch  1 taken 26%
   133927:   12:    return -1;
    47298:   13:  return 0;
   317873:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1002 returned 100% blocks executed 94%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1002:   44:  SelectStream(1);
     1002:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2004:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1002:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22044:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   220440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   190380:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   100200:   65:        }
    10020:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1002:   73:  if (numPlayers == 2)
branch  0 taken 35%
branch  1 taken 65%
        -:   74:    {
      347:   75:      state->supplyCount[curse] = 10;
      347:   76:    }
      655:   77:  else if (numPlayers == 3)
branch  0 taken 52%
branch  1 taken 48%
        -:   78:    {
      341:   79:      state->supplyCount[curse] = 20;
      341:   80:    }
        -:   81:  else
        -:   82:    {
      314:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1002:   87:  if (numPlayers == 2)
branch  0 taken 35%
branch  1 taken 65%
        -:   88:    {
      347:   89:      state->supplyCount[estate] = 8;
      347:   90:      state->supplyCount[duchy] = 8;
      347:   91:      state->supplyCount[province] = 8;
      347:   92:    }
        -:   93:  else
        -:   94:    {
      655:   95:      state->supplyCount[estate] = 12;
      655:   96:      state->supplyCount[duchy] = 12;
      655:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1002:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1002:  102:  state->supplyCount[silver] = 40;
     1002:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42084:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   330660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   155310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20040:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 1%
branch  3 taken 99%
        -:  114:		{
        1:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8; 
        1:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        1:  119:		}
        -:  120:	      else
        -:  121:		{
    10019:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10020:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   145290:  130:	}
        -:  131:
    20040:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     7950:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
     2973:  140:      state->deckCount[i] = 0;
    23784:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     8919:  143:	  state->deck[i][j] = estate;
     8919:  144:	  state->deckCount[i]++;
     8919:  145:	}
    47568:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
    20811:  148:	  state->deck[i][j] = copper;
    20811:  149:	  state->deckCount[i]++;		
    20811:  150:	}
     2973:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     7950:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
     2973:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     2973:  160:    }
        -:  161:
        -:  162:  //draw player hands
     7950:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2973:  166:      state->handCount[i] = 0;
     2973:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     2973:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
    27054:  178:      state->embargoTokens[i] = 0;
    27054:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1002:  182:  state->outpostPlayed = 0;
     1002:  183:  state->phase = 0;
     1002:  184:  state->numActions = 1;
     1002:  185:  state->numBuys = 1;
     1002:  186:  state->playedCardCount = 0;
     1002:  187:  state->whoseTurn = 0;
     1002:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12024:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     5010:  193:    drawCard(state->whoseTurn, state);
     5010:  194:  }
        -:  195:
     1002:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1002:  198:  return 0;
     1002:  199:}
        -:  200:
function shuffle called 3532 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3532:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3532:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4%
branch  1 taken 96%
      146:  210:    return -1;
     3386:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   157034:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4%
    75131:  215:    card = floor(Random() * state->deckCount[player]);
    75131:  216:    newDeck[newDeckPos] = state->deck[player][card];
    75131:  217:    newDeckPos++;
  3856274:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 96%
branch  1 taken 4%
  1853006:  219:      state->deck[player][i] = state->deck[player][i+1];
  1853006:  220:    }
    75131:  221:    state->deckCount[player]--;
        -:  222:  }
   157034:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4%
    75131:  224:    state->deck[player][i] = newDeck[i];
    75131:  225:    state->deckCount[player]++;
    75131:  226:  }
        -:  227:
     3386:  228:  return 0;
     3532:  229:}
        -:  230:
function playCard called 32 returned 100% blocks executed 83%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       32:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       32:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       32:  243:  if ( state->numActions < 1 )
branch  0 taken 56%
branch  1 taken 44%
        -:  244:    {
       18:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       14:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       18:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 29%
branch  1 taken 71%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
       10:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        4:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        4:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        4:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        4:  269:  return 0;
       32:  270:}
        -:  271:
function buyCard called 37 returned 100% blocks executed 75%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       37:  280:  who = state->whoseTurn;
        -:  281:
       37:  282:  if (state->numBuys < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       37:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 0%
branch  1 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       37:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 0%
branch  1 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       37:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       37:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       37:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       37:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       37:  308:  return 0;
       37:  309:}
        -:  310:
function numHandCards called 1311653 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
  1311653:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 2590952 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
  2590952:  316:  int currentPlayer = whoseTurn(state);
  2590952:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 38864 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
    38864:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3939686 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
  3939686:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 38 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       38:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      488:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16%
      206:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      206:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      206:  359:  }
       38:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       38:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50%
branch  1 taken 50%
       19:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       19:  365:  }
        -:  366:  else{
       19:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       38:  370:  state->outpostPlayed = 0;
       38:  371:  state->phase = 0;
       38:  372:  state->numActions = 1;
       38:  373:  state->coins = 0;
       38:  374:  state->numBuys = 1;
       38:  375:  state->playedCardCount = 0;
       38:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      456:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
      190:  381:    drawCard(state->whoseTurn, state);//Draw a card
      190:  382:  }
        -:  383:
        -:  384:  //Update money
       38:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       38:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 131 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      131:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 1%
branch  1 taken 99%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      130:  401:  j = 0;
     6760:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
     3250:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 3%
branch  1 taken 97%
        -:  405:	{
      103:  406:	  j++;
      103:  407:	}
     3250:  408:    }
      130:  409:  if ( j >= 3)
branch  0 taken 2%
branch  1 taken 98%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
      128:  414:  return 0;
      131:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 72%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
       14:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 20%
branch  1 taken 80%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        5:  430:    }
        -:  431:
        -:  432:  //score from discard
       16:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  434:    {
        6:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        7:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17%
branch  1 taken 83%
        6:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        6:  441:    }
        -:  442:
        -:  443:  //score from deck
       16:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  445:    {
        6:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        7:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 17%
branch  1 taken 83%
        6:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        7:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 17%
branch  1 taken 83%
        6:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        6:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 108300 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   108300:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    91708:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
    45401:  534:      state->deck[player][i] = state->discard[player][i];
    45401:  535:      state->discard[player][i] = -1;
    45401:  536:    }
        -:  537:
      453:  538:    state->deckCount[player] = state->discardCount[player];
      453:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      453:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      453:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      453:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      453:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      453:  559:    if (deckCounter == 0)
branch  0 taken 9%
branch  1 taken 91%
       40:  560:      return -1;
        -:  561:
      413:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      413:  563:    state->deckCount[player]--;
      413:  564:    state->handCount[player]++;//Increment hand count
      413:  565:  }
        -:  566:
        -:  567:  else{
   107847:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   107847:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   107847:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   107847:  576:    state->deckCount[player]--;
   107847:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   108260:  580:  return 0;
   108300:  581:}
        -:  582:
function getCost called 74 returned 100% blocks executed 25%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       74:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 22%
branch  4 taken 0%
branch  5 taken 54%
branch  6 taken 14%
branch  7 taken 5%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 5%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       16:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       40:  598:      return 3;
        -:  599:    case gold:
       10:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       74:  644:}
        -:  645:
        -:  646:/***
        -:  647:* Assignment 2 Q3 - Code Refactor for 5 Cards
        -:  648:***/
        -:  649:
        -:  650:// Smithy Card
function playCardSmithy called 9002 returned 100% blocks executed 100%
        -:  651:int playCardSmithy(struct gameState *state, int currentPlayer, int handPos) 
        -:  652:{
        -:  653:  int i;
        -:  654:  //+3 Cards
    90020:  655:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  656:  {
    36008:  657:    drawCard(currentPlayer, state);
    36008:  658:	}			
        -:  659:  //discard card from hand
     9002:  660:  discardCard(handPos, currentPlayer, state, 0);
     9002:  661:  return 0;
        -:  662:}
        -:  663:
        -:  664:// Adventurer Card
function playCardAdventurer called 5002 returned 100% blocks executed 100%
        -:  665:int playCardAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:  666:{
        -:  667:  int cardDrawn;
    58178:  668:  while(drawntreasure<2) {
branch  0 taken 83%
branch  1 taken 17%
    24087:  669:    if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
      106:  670:      shuffle(currentPlayer, state);
      106:  671:    }
    24087:  672:    drawCard(currentPlayer, state);
    24087:  673:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  674:    // if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    38201:  675:    if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 59%
branch  1 taken 41%
branch  2 taken 1%
branch  3 taken 99%
    10004:  676:      drawntreasure++;
        -:  677:    else {
    14083:  678:      temphand[z]=cardDrawn;
    14083:  679:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    14083:  680:      z++;
        -:  681:    }
        -:  682:  }
    38170:  683:  while(z-1>=0) {
branch  0 taken 74%
branch  1 taken 26%
    14083:  684:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    14083:  685:	  z=z-1;
        -:  686:  }
     5002:  687:  return 0;
        -:  688:}
        -:  689:// Village Card
function playCardVillage called 13002 returned 100% blocks executed 100%
        -:  690:int playCardVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:  //+1 Card
    13002:  693:  drawCard(currentPlayer, state);
        -:  694:  
        -:  695:  //+2 Actions
    13002:  696:  state->numActions = state->numActions + 3;
        -:  697:  
        -:  698:  //discard played card from hand
    13002:  699:  discardCard(handPos, currentPlayer, state, 0);
    13002:  700:  return 0;
        -:  701:}
        -:  702:
        -:  703:// Remodel Card
function playCardRemodel called 0 returned 0% blocks executed 0%
        -:  704:int playCardRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) 
        -:  705:{
        -:  706:    int i;
        -:  707:    int j;
    #####:  708:    j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  709:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  710:	  {
    #####:  711:	    return -1;
        -:  712:	  }
    #####:  713:    gainCard(choice2, state, 0, currentPlayer);
        -:  714:
        -:  715:    //discard card from hand
    #####:  716:    discardCard(handPos, currentPlayer, state, 0);
        -:  717:
        -:  718:    //discard trashed card
    #####:  719:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:  	{
    #####:  721:	    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:        {
    #####:  723:          discardCard(i, currentPlayer, state, 0);			
    #####:  724:          break;
        -:  725:        }
    #####:  726:    }
    #####:  727:  return 0;
    #####:  728:}
        -:  729:
        -:  730:// Gardens Card
function playCardGardens called 0 returned 0% blocks executed 0%
        -:  731:int playCardGardens(int currentPlayer, struct gameState *state)
        -:  732:{
    #####:  733:  drawCard(currentPlayer, state);
    #####:  734:  return -1;
        -:  735:}
        -:  736:// End Assignment2 Q3: User Refactor. 
        -:  737:
function cardEffect called 19005 returned 100% blocks executed 11%
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
    19005:  745:  int currentPlayer = whoseTurn(state);
    19005:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
    19005:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
    19005:  750:  int drawntreasure=0;
        -:  751:  // int cardDrawn;
    19005:  752:  int z = 0;// this is the counter for the temp hand
    19005:  753:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37%
branch  1 taken 63%
     6955:  754:    nextPlayer = 0;
     6955:  755:  }
        -:  756:  
        -:  757:	
        -:  758:  //uses switch to select card and perform actions
    46011:  759:  switch( card ) 
branch  0 taken 11%
branch  1 taken 11%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 28%
branch  8 taken 28%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 2%
        -:  760:    {
        -:  761:    case adventurer:
     5002:  762:      playCardAdventurer(drawntreasure, state, currentPlayer, &temphand[z], z);
        -:  763:      // while(drawntreasure<2) {
        -:  764:      //   if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
        -:  765:      //     shuffle(currentPlayer, state);
        -:  766:      //   }
        -:  767:      //   drawCard(currentPlayer, state);
        -:  768:      //   cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  769:      //   if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  770:      //     drawntreasure++;
        -:  771:      //   else {
        -:  772:      //     temphand[z]=cardDrawn;
        -:  773:      //     state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  774:      //     z++;
        -:  775:      //   }
        -:  776:      // }
        -:  777:      // while(z-1>=0) {
        -:  778:      //   state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  779:      //   z=z-1;
        -:  780:      // }
        -:  781:      // return 0;
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    50020:  785:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  786:	{
    20008:  787:	  drawCard(currentPlayer, state);
    20008:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
     5002:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    39998:  794:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  795:	{
    14997:  796:	  if ( i != currentPlayer )
branch  0 taken 67%
branch  1 taken 33%
        -:  797:	    {
     9995:  798:	      drawCard(i, state);
     9995:  799:	    }
    14997:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
     5002:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
     5002:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  820:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
    #####:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
    #####:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
    #####:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
        -:  861:      // playCardGardens();
    #####:  862:      playCardGardens(currentPlayer, state);
        -:  863:			
        -:  864:    case mine:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:		
    #####:  872:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
    #####:  882:      gainCard(choice2, state, 2, currentPlayer);
        -:  883:
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
        -:  886:
        -:  887:      //discard trashed card
    #####:  888:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	{
    #####:  890:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  891:	    {
    #####:  892:	      discardCard(i, currentPlayer, state, 0);			
    #####:  893:	      break;
        -:  894:	    }
    #####:  895:	}
        -:  896:			
    #####:  897:      return 0;
        -:  898:			
        -:  899:    case remodel:
    #####:  900:      playCardRemodel(state, currentPlayer, choice1, choice2, handPos);
        -:  901:      //     j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  902:
        -:  903:      //     if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  904:      // {
        -:  905:      //   return -1;
        -:  906:      // }
        -:  907:
        -:  908:      //     gainCard(choice2, state, 0, currentPlayer);
        -:  909:
        -:  910:      //     //discard card from hand
        -:  911:      //     discardCard(handPos, currentPlayer, state, 0);
        -:  912:
        -:  913:      //     //discard trashed card
        -:  914:      //     for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  915:      // {
        -:  916:      //   if (state->hand[currentPlayer][i] == j)
        -:  917:      //     {
        -:  918:      //       discardCard(i, currentPlayer, state, 0);			
        -:  919:      //       break;
        -:  920:      //     }
        -:  921:      // }
        -:  922:      //     return 0;
        -:  923:		
        -:  924:    case smithy:
     9002:  925:      playCardSmithy(state, currentPlayer, handPos);
        -:  926:      // //+3 Cards
        -:  927:      // for (i = 0; i < 3; i++)
        -:  928:      // {
        -:  929:      //   drawCard(currentPlayer, state);
        -:  930:      // }			
        -:  931:      // //discard card from hand
        -:  932:      // discardCard(handPos, currentPlayer, state, 0);
        -:  933:      // return 0;
        -:  934:		
        -:  935:    case village:
    13002:  936:      playCardVillage(state, currentPlayer, handPos);
        -:  937:      // //+1 Card
        -:  938:      // drawCard(currentPlayer, state);
        -:  939:			
        -:  940:      // //+2 Actions
        -:  941:      // state->numActions = state->numActions + 2;
        -:  942:			
        -:  943:      // //discard played card from hand
        -:  944:      // discardCard(handPos, currentPlayer, state, 0);
        -:  945:      // return 0;
        -:  946:		
        -:  947:    case baron:
    13002:  948:      state->numBuys++;//Increase buys by 1!
    13002:  949:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0%
branch  1 taken 100%
    #####:  950:	int p = 0;//Iterator for hand!
    #####:  951:	int card_not_discarded = 1;//Flag for discard set!
    #####:  952:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  953:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  954:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  955:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  956:	    state->discardCount[currentPlayer]++;
    #####:  957:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  958:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  959:	    }
    #####:  960:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  961:	    state->handCount[currentPlayer]--;
    #####:  962:	    card_not_discarded = 0;//Exit the loop
    #####:  963:	  }
    #####:  964:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  965:	    if(DEBUG) {
        -:  966:	      printf("No estate cards in your hand, invalid choice\n");
        -:  967:	      printf("Must gain an estate if there are any\n");
        -:  968:	    }
    #####:  969:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  970:	      gainCard(estate, state, 0, currentPlayer);
    #####:  971:	      state->supplyCount[estate]--;//Decrement estates
    #####:  972:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  973:		isGameOver(state);
    #####:  974:	      }
    #####:  975:	    }
    #####:  976:	    card_not_discarded = 0;//Exit the loop
    #####:  977:	  }
        -:  978:			    
        -:  979:	  else{
    #####:  980:	    p++;//Next card
        -:  981:	  }
        -:  982:	}
    #####:  983:      }
        -:  984:			    
        -:  985:      else{
    13002:  986:	if (supplyCount(estate, state) > 0){
branch  0 taken 99%
branch  1 taken 1%
    12894:  987:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    12894:  988:	  state->supplyCount[estate]--;//Decrement Estates
    12894:  989:	  if (supplyCount(estate, state) == 0){
branch  0 taken 1%
branch  1 taken 99%
       92:  990:	    isGameOver(state);
       92:  991:	  }
    12894:  992:	}
        -:  993:      }
        -:  994:	    
        -:  995:      
    13002:  996:      return 0;
        -:  997:		
        -:  998:    case great_hall:
        -:  999:      //+1 Card
    #####: 1000:      drawCard(currentPlayer, state);
        -: 1001:			
        -: 1002:      //+1 Actions
    #####: 1003:      state->numActions++;
        -: 1004:			
        -: 1005:      //discard card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case minion:
        -: 1010:      //+1 action
    #####: 1011:      state->numActions++;
        -: 1012:			
        -: 1013:      //discard card from hand
    #####: 1014:      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:			
    #####: 1016:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1017:	{
    #####: 1018:	  state->coins = state->coins + 2;
    #####: 1019:	}
        -: 1020:			
    #####: 1021:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1022:	{
        -: 1023:	  //discard hand
    #####: 1024:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1027:	    }
        -: 1028:				
        -: 1029:	  //draw 4
    #####: 1030:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1031:	    {
    #####: 1032:	      drawCard(currentPlayer, state);
    #####: 1033:	    }
        -: 1034:				
        -: 1035:	  //other players discard hand and redraw if hand size > 4
    #####: 1036:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1037:	    {
    #####: 1038:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1039:		{
    #####: 1040:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1041:		    {
        -: 1042:		      //discard hand
    #####: 1043:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1044:			{
    #####: 1045:			  discardCard(handPos, i, state, 0);
        -: 1046:			}
        -: 1047:							
        -: 1048:		      //draw 4
    #####: 1049:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1050:			{
    #####: 1051:			  drawCard(i, state);
    #####: 1052:			}
    #####: 1053:		    }
    #####: 1054:		}
    #####: 1055:	    }
        -: 1056:				
    #####: 1057:	}
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case steward:
    #####: 1061:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
        -: 1063:	  //+2 cards
    #####: 1064:	  drawCard(currentPlayer, state);
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	}
    #####: 1067:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1068:	{
        -: 1069:	  //+2 coins
    #####: 1070:	  state->coins = state->coins + 2;
    #####: 1071:	}
        -: 1072:      else
        -: 1073:	{
        -: 1074:	  //trash 2 cards in hand
    #####: 1075:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1076:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card from hand
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case tribute:
    #####: 1084:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1085:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1086:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	  state->deckCount[nextPlayer]--;
    #####: 1088:	}
    #####: 1089:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1090:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1091:	  state->discardCount[nextPlayer]--;
    #####: 1092:	}
        -: 1093:	else{
        -: 1094:	  //No Card to Reveal
        -: 1095:	  if (DEBUG){
        -: 1096:	    printf("No cards to reveal\n");
        -: 1097:	  }
        -: 1098:	}
    #####: 1099:      }
        -: 1100:	    
        -: 1101:      else{
    #####: 1102:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1103:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1104:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1105:	    state->deckCount[nextPlayer]++;
    #####: 1106:	    state->discard[nextPlayer][i] = -1;
    #####: 1107:	    state->discardCount[nextPlayer]--;
    #####: 1108:	  }
        -: 1109:			    
    #####: 1110:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1111:	} 
    #####: 1112:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1113:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1114:	state->deckCount[nextPlayer]--;
    #####: 1115:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1116:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1117:	state->deckCount[nextPlayer]--;
        -: 1118:      }    
        -: 1119:		       
    #####: 1120:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1121:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1122:	state->playedCardCount++;
    #####: 1123:	tributeRevealedCards[1] = -1;
    #####: 1124:      }
        -: 1125:
    #####: 1126:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1127:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1128:	  state->coins += 2;
    #####: 1129:	}
        -: 1130:		    
    #####: 1131:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1132:	  drawCard(currentPlayer, state);
    #####: 1133:	  drawCard(currentPlayer, state);
    #####: 1134:	}
        -: 1135:	else{//Action Card
    #####: 1136:	  state->numActions = state->numActions + 2;
        -: 1137:	}
    #####: 1138:      }
        -: 1139:	    
    #####: 1140:      return 0;
        -: 1141:		
        -: 1142:    case ambassador:
    #####: 1143:      j = 0;		//used to check if player has enough cards to discard
        -: 1144:
    #####: 1145:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1146:	{
    #####: 1147:	  return -1;				
        -: 1148:	}
        -: 1149:
    #####: 1150:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
    #####: 1152:	  return -1;
        -: 1153:	}
        -: 1154:
    #####: 1155:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1158:	    {
    #####: 1159:	      j++;
    #####: 1160:	    }
    #####: 1161:	}
    #####: 1162:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1163:	{
    #####: 1164:	  return -1;				
        -: 1165:	}
        -: 1166:
        -: 1167:      if (DEBUG) 
        -: 1168:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1169:
        -: 1170:      //increase supply count for choosen card by amount being discarded
    #####: 1171:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1172:			
        -: 1173:      //each other player gains a copy of revealed card
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1179:	    }
    #####: 1180:	}
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
        -: 1185:      //trash copies of cards returned to supply
    #####: 1186:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1189:	    {
    #####: 1190:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1191:		{
    #####: 1192:		  discardCard(i, currentPlayer, state, 1);
    #####: 1193:		  break;
        -: 1194:		}
    #####: 1195:	    }
    #####: 1196:	}			
        -: 1197:
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case cutpurse:
        -: 1201:
    #####: 1202:      updateCoins(currentPlayer, state, 2);
    #####: 1203:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1206:	    {
    #####: 1207:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:		{
    #####: 1209:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1210:		    {
    #####: 1211:		      discardCard(j, i, state, 0);
    #####: 1212:		      break;
        -: 1213:		    }
    #####: 1214:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1215:		    {
    #####: 1216:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1217:			{
        -: 1218:			  if (DEBUG)
        -: 1219:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1220:			}	
    #####: 1221:		      break;
        -: 1222:		    }		
    #####: 1223:		}
        -: 1224:					
    #####: 1225:	    }
        -: 1226:				
    #####: 1227:	}				
        -: 1228:
        -: 1229:      //discard played card from hand
    #####: 1230:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1231:
    #####: 1232:      return 0;
        -: 1233:
        -: 1234:		
        -: 1235:    case embargo: 
        -: 1236:      //+2 Coins
    #####: 1237:      state->coins = state->coins + 2;
        -: 1238:			
        -: 1239:      //see if selected pile is in play
    #####: 1240:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  return -1;
        -: 1243:	}
        -: 1244:			
        -: 1245:      //add embargo token to selected supply pile
    #####: 1246:      state->embargoTokens[choice1]++;
        -: 1247:			
        -: 1248:      //trash card
    #####: 1249:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1250:      return 0;
        -: 1251:		
        -: 1252:    case outpost:
        -: 1253:      //set outpost flag
    #####: 1254:      state->outpostPlayed++;
        -: 1255:			
        -: 1256:      //discard card
    #####: 1257:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1258:      return 0;
        -: 1259:		
        -: 1260:    case salvager:
        -: 1261:      //+1 buy
    #####: 1262:      state->numBuys++;
        -: 1263:			
    #####: 1264:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1265:	{
        -: 1266:	  //gain coins equal to trashed card
    #####: 1267:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1268:	  //trash card
    #####: 1269:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1270:	}
        -: 1271:			
        -: 1272:      //discard card
    #####: 1273:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1274:      return 0;
        -: 1275:		
        -: 1276:    case sea_hag:
    #####: 1277:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1278:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1279:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1280:	  state->discardCount[i]++;
    #####: 1281:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1282:	}
    #####: 1283:      }
    #####: 1284:      return 0;
        -: 1285:		
        -: 1286:    case treasure_map:
        -: 1287:      //search hand for another treasure_map
    #####: 1288:      index = -1;
    #####: 1289:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1290:	{
    #####: 1291:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1292:	    {
    #####: 1293:	      index = i;
    #####: 1294:	      break;
        -: 1295:	    }
    #####: 1296:	}
    #####: 1297:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1298:	{
        -: 1299:	  //trash both treasure cards
    #####: 1300:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1301:	  discardCard(index, currentPlayer, state, 1);
        -: 1302:
        -: 1303:	  //gain 4 Gold cards
    #####: 1304:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1305:	    {
    #####: 1306:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1307:	    }
        -: 1308:				
        -: 1309:	  //return success
    #####: 1310:	  return 1;
        -: 1311:	}
        -: 1312:			
        -: 1313:      //no second treasure_map found in hand
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
     1001: 1317:  return -1;
    19005: 1318:} //End Card Effect function
        -: 1319:
function discardCard called 27006 returned 100% blocks executed 80%
        -: 1320:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1321:{
        -: 1322:	
        -: 1323:  //if card is not trashed, added to Played pile 
    27006: 1324:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1325:    {
        -: 1326:      //add card to played pile
    27006: 1327:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    27006: 1328:      state->playedCardCount++;
    27006: 1329:    }
        -: 1330:	
        -: 1331:  //set played card to -1
    27006: 1332:  state->hand[currentPlayer][handPos] = -1;
        -: 1333:	
        -: 1334:  //remove card from player's hand
    27006: 1335:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1336:    {
        -: 1337:      //reduce number of cards in hand
    #####: 1338:      state->handCount[currentPlayer]--;
    #####: 1339:    }
    27006: 1340:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1341:    {
        -: 1342:      //reduce number of cards in hand
    #####: 1343:      state->handCount[currentPlayer]--;
    #####: 1344:    }
        -: 1345:  else 	
        -: 1346:    {
        -: 1347:      //replace discarded card with last card in hand
    27006: 1348:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1349:      //set last card to -1
    27006: 1350:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1351:      //reduce number of cards in hand
    27006: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
        -: 1354:	
    27006: 1355:  return 0;
        -: 1356:}
        -: 1357:
function gainCard called 12931 returned 100% blocks executed 72%
        -: 1358:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1359:{
        -: 1360:  //Note: supplyPos is enum of choosen card
        -: 1361:	
        -: 1362:  //check if supply pile is empty (0) or card is not used in game (-1)
    12931: 1363:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1364:    {
    #####: 1365:      return -1;
        -: 1366:    }
        -: 1367:	
        -: 1368:  //added card for [whoseTurn] current player:
        -: 1369:  // toFlag = 0 : add to discard
        -: 1370:  // toFlag = 1 : add to deck
        -: 1371:  // toFlag = 2 : add to hand
        -: 1372:
    12931: 1373:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1374:    {
    #####: 1375:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1376:      state->deckCount[player]++;
    #####: 1377:    }
    12931: 1378:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1379:    {
    #####: 1380:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1381:      state->handCount[player]++;
    #####: 1382:    }
        -: 1383:  else
        -: 1384:    {
    12931: 1385:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    12931: 1386:      state->discardCount[player]++;
        -: 1387:    }
        -: 1388:	
        -: 1389:  //decrease number in supply pile
    12931: 1390:  state->supplyCount[supplyPos]--;
        -: 1391:	 
    12931: 1392:  return 0;
    12931: 1393:}
        -: 1394:
function updateCoins called 1044 returned 100% blocks executed 100%
        -: 1395:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1396:{
        -: 1397:  int i;
        -: 1398:	
        -: 1399:  //reset coin count
     1044: 1400:  state->coins = 0;
        -: 1401:
        -: 1402:  //add coins for each Treasure card in player's hand
    12560: 1403:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1404:    {
     5236: 1405:      if (state->hand[player][i] == copper)
branch  0 taken 78%
branch  1 taken 22%
        -: 1406:	{
     4108: 1407:	  state->coins += 1;
     4108: 1408:	}
     1128: 1409:      else if (state->hand[player][i] == silver)
branch  0 taken 6%
branch  1 taken 94%
        -: 1410:	{
       63: 1411:	  state->coins += 2;
       63: 1412:	}
     1065: 1413:      else if (state->hand[player][i] == gold)
branch  0 taken 1%
branch  1 taken 99%
        -: 1414:	{
        6: 1415:	  state->coins += 3;
        6: 1416:	}	
     5236: 1417:    }	
        -: 1418:
        -: 1419:  //add bonus
     1044: 1420:  state->coins += bonus;
        -: 1421:
     1044: 1422:  return 0;
        -: 1423:}
        -: 1424:
        -: 1425://end of dominion.c
